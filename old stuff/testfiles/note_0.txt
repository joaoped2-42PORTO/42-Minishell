Creating a program in C that does everything like a shell (also known as a command-line interpreter) is a complex task that requires a good understanding of operating system concepts, system calls, and process management.
However, I can give you a general overview of the steps involved in creating such a program.

1	Read input from the user: The first step is to read input from the user, which consists of a command or a series of commands separated by a pipe symbol (|) or a semicolon (;).

2	Parse the input: Once the input is read, it needs to be parsed into individual commands and arguments.
	This involves splitting the input into tokens, separating them based on spaces, quotes, and escape characters.

3	Create child processes: Once the input is parsed, the program needs to create child processes to execute each command.
	This involves using the fork() system call to create a new process and the exec() family of system calls to replace the child process with the command to be executed.

4	Manage the child processes: While the child processes are executing, the parent process needs to manage them, which involves waiting for them to finish and collecting their exit status.

5	Handle input/output redirection: The shell program also needs to handle input/output redirection using the <, >, and >> operators.
	This involves redirecting the standard input/output streams of the child processes to files specified in the input.

6	Handle pipes: If the input contains pipe symbols, the shell program needs to handle them by creating multiple child processes and connecting their input/output streams using pipes.

7	Handle environment variables: The shell program also needs to handle environment variables such as $PATH, which specifies the directories to search for executables.

8	Handle signals: Finally, the shell program needs to handle signals such as Ctrl-C and Ctrl-Z, which can be used to interrupt or suspend the execution of commands.



Here are the most common special characters in bash and what they do:

1. `|`: Pipe operator. Redirects the output of one command to another command as input.

2. `>`: Output redirection. Redirects the output of a command to a file, overwriting the file if it already exists.

3. `>>`: Append output. Redirects the output of a command to a file, appending the output to the end of the file if it already exists.

4. `<`: Input redirection. Redirects the input of a command from a file instead of standard input.

5. `&`: Background job. Runs a command in the background, allowing you to continue using the shell while the command runs.

6. `*`: Wildcard. Matches any string of characters in a filename.

7. `?`: Wildcard. Matches any single character in a filename.

8. `[]`: Wildcard. Matches any character specified inside the brackets in a filename.

9. `~`: Tilde. Short for the home directory of the current user.

10. `$`: Dollar sign. Indicates that what follows is a variable or command substitution.

11. `#`: Hash symbol. Indicates a comment in a script or on the command line.

12. `\`: Backslash. Escapes the next character, preventing it from being interpreted as a special character.

13. `:`: Colon. Used as a separator in PATH and other environment variables.

14. `;`: Semicolon. Separates multiple commands on the same line.

15. `(` and `)`: Parentheses. Used for grouping commands and creating subshells.

16. `!`: History expansion. Allows you to refer to previous commands in your command history.

17. `"` and `'`: Double and single quotes. Used for quoting strings and preventing expansion of variables and special characters.

18. `\\`: Double backslash. Escapes a backslash in a string.
